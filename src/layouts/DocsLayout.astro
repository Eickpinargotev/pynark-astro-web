---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = 'Documentación de precios y guía de instalación' } = Astro.props;
// Ruta actual y utilidades para breadcrumb y estados activos
const pathname = Astro.url?.pathname ?? '/';
const currentPath = pathname.replace(/\/$/, '');
const parts = pathname.split('/').filter(Boolean);
let docIdx = parts.indexOf('docs');
const crumbParts = (docIdx !== -1) ? parts.slice(docIdx + 1) : parts;
/** Mapa de localización para slugs comunes */
const LABELS: Record<string,string> = {
  'pricing': 'Precios',
  'cuenta': 'Cuenta',
  'empezar': 'Empezar',
  'instalacion': 'Instalación'
};
/** Transforma slug a Título simple y localizado */
const toTitle = (s:string) => {
  const raw = decodeURIComponent(s);
  const key = raw.toLowerCase();
  const localized = LABELS[key];
  if (localized) return localized;
  return raw.replace(/[-_]+/g,' ').replace(/\b\w/g, c=>c.toUpperCase());
};
const crumbs = crumbParts.map((p) => ({ label: toTitle(p) }));

// Construir índice simple de documentación en build y embebido como JSON para el cliente.
// Usamos el query ?raw para obtener el contenido fuente de cada MDX.
const rawModules = import.meta.glob('../pages/docs/**/*.mdx', { eager: true, import: 'default', query: '?raw' });
const __docIndex = Object.entries(rawModules).map(([origPath, content]) => {
  // El glob con query devuelve claves que terminan en ?raw; lo eliminamos para procesar la ruta real.
  let p = origPath.replace(/\?raw$/, '');
  const raw = String(content||'');
  let title = '';
  if (raw.startsWith('---')) {
    const end = raw.indexOf('\n---',3); if (end!==-1){ const fm = raw.slice(3,end); const m = fm.match(/title:\s*(.+)/i); if(m) title = m[1].replace(/^['"`]|['"`]$/g,'').trim(); }
  }
  const h1 = raw.match(/^#\s+(.+)$/m); const h2 = raw.match(/^##\s+(.+)$/m);
  if(!title) title = h1?.[1] || h2?.[1] || 'Documento';
  const headings = Array.from(raw.matchAll(/^#{1,3}\s+(.+)$/gm)).map(m=>m[1].trim());
  // Limpieza adicional: eliminar líneas de import/export ESM para que no aparezcan en snippets.
  const cleaned = raw
    .replace(/^(?:import|export)\s+[^\n]*$/gm,' ') // quita imports/exports de una línea
    .replace(/export\s+const\s+prerender\s*=\s*true\s*;?/gi,' ');
  const text = cleaned
    .replace(/---[\s\S]*?---/,' ')
    .replace(/```[\s\S]*?```/g,' ')
    .replace(/`[^`]+`/g,' ')
    .replace(/<[^>]+>/g,' ')
    .replace(/!\[[^\]]*\]\([^)]*\)/g,' ')
    .replace(/\[[^\]]*\]\([^)]*\)/g,' ')
    .replace(/[#>*_~`]+/g,' ')
    .replace(/\\/g,' ')
    .replace(/\s+/g,' ') // compactar
    .trim()
    .slice(0, 8000);
  let url = p.replace(/\\/g,'/').replace(/^.*\/pages/,'').replace(/\.mdx$/,'').replace(/\/index$/,'/');
  if(!url.startsWith('/')) url = '/' + url;
  return { url, title, headings, text };
}).filter(r => r.url.startsWith('/docs/'));
// Serializar índice para incrustar en el HTML de forma segura
const __docIndexJSON = JSON.stringify(__docIndex).replace(/</g,'\\u003c');
---

<!DOCTYPE html>
<html lang="es" class="scroll-smooth" data-theme-init>
  <head>
    <!-- Prevent theme flash: hide until theme is applied -->
    <style>
      html[data-theme-init] { visibility: hidden; }
      html[data-theme-init] *, html[data-theme-init] *::before, html[data-theme-init] *::after {
        transition: none !important;
        animation: none !important;
      }
      /* Neutralize UA button styles during init */
      html[data-theme-init] #theme-toggle-docs { appearance: none; border: none; }
      /* Fallback styles before Tailwind loads to avoid white flash */
      html[data-theme="dark"] #theme-toggle-docs { background-color: #0b1220; color: #cbd5e1; }
      html[data-theme="light"] #theme-toggle-docs { background-color: #f8fafc; color: #334155; }
    </style>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#3b82f6" />
    <link rel="icon" type="image/png" href="/assets/pynark_favicon.png" />
  <title>{title}</title>
  <!-- No-flash theme init: per-session default dark, overridden by session selection, before paint -->
  <script>
    (function () {
      var root = document.documentElement;
      root.setAttribute('data-theme-init', '');
      try {
        var t = sessionStorage.getItem('color-theme');
        if (!t) { t = 'dark'; sessionStorage.setItem('color-theme', t); }
  var isDark = t === 'dark';
  root.classList.toggle('dark', isDark);
  root.style.colorScheme = isDark ? 'dark' : 'light';
  // Set background early to avoid white flash
  root.style.backgroundColor = isDark ? '#0f172a' : '#ffffff';
  root.setAttribute('data-theme', isDark ? 'dark' : 'light');
        var meta = document.querySelector('meta[name="theme-color"]');
  if (meta) meta.setAttribute('content', isDark ? '#0f172a' : '#3b82f6');
      } catch (e) { /* ignore */ }
      root.removeAttribute('data-theme-init');
    })();
  </script>
  <script is:inline type="application/json" id="__doc-index" set:html={__docIndexJSON}></script>
  </head>
  <body class="bg-white dark:bg-slate-950 text-slate-900 dark:text-slate-100">
    <!-- Topbar estilo Cursor Docs -->
  <header class="sticky top-0 z-[200] border-b border-slate-200/60 dark:border-slate-800/70 bg-white dark:bg-slate-950">
  <div id="docs-header-row" class="max-w-[90rem] mx-auto min-h-[3.75rem] /* ~60px */ px-4 py-2 sm:px-6 lg:px-8 grid grid-cols-[auto_minmax(0,1fr)_auto] items-center gap-3">
        <a href="/" class="flex items-center gap-2 pr-2">
          <img src="/assets/pynark_favicon.png" class="w-6 h-6" alt="Pynark" />
          <span class="font-semibold hidden sm:block">Pynark Docs</span>
        </a>
        <div class="min-w-0 max-w-[640px] w-full hidden md:block">
          <div class="relative z-[140]" id="doc-search" data-search-container>
            <svg class="pointer-events-none absolute left-4 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.3-4.3"/></svg>
            <input id="doc-search-input" placeholder="Buscar en la documentación…" class="w-full pl-11 pr-3 py-2 rounded-lg bg-slate-50 dark:bg-slate-900 border border-slate-200 dark:border-slate-800 text-sm placeholder:text-slate-400 focus:outline-none focus:ring-2 focus:ring-primary-500/40" autocomplete="off" aria-autocomplete="list" aria-controls="doc-search-list" />
            <div id="doc-search-dropdown" class="absolute left-0 right-0 top-full mt-2 md:mt-1 w-full bg-white dark:bg-slate-950 border border-slate-200 dark:border-slate-800 rounded-lg shadow-2xl md:shadow-lg overflow-hidden hidden z-[220]">
              <ul id="doc-search-list" class="max-h-[70vh] md:max-h-72 overflow-auto text-sm"></ul>
            </div>
          </div>
        </div>
        <!-- Theme toggle moved to top-right -->
  <div class="flex items-center gap-1 justify-self-end ml-auto">
        <!-- Mobile search icon (shows on < md) -->
        <button id="search-toggle" class="md:hidden h-11 w-11 flex items-center justify-center rounded-lg text-slate-600 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-900 focus:outline-none focus:ring-2 focus:ring-primary-500/40" aria-label="Abrir búsqueda" aria-expanded="false" aria-controls="mobile-search-panel">
          <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.3-4.3"/></svg>
        </button>
        <button id="theme-toggle-docs" class="h-11 w-11 flex items-center justify-center rounded-lg text-slate-600 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-900 focus:outline-none focus:ring-2 focus:ring-primary-500/40" aria-label="Tema: Claro" title="Tema: Claro">
          <svg id="icon-moon" class="hidden w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/></svg>
          <svg id="icon-sun" class="hidden w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="4"/><path d="M12 2v2m0 16v2m10-10h-2M4 12H2m15.556-7.556-1.414 1.414M6.343 17.657l-1.414 1.414m12.728 0-1.414-1.414M6.343 6.343 4.929 4.929"/></svg>
        </button>
        </div>
        
      </div>

      <!-- Eliminado panel móvil anterior; ahora usamos overlay de pantalla completa -->

      <!-- Breadcrumb bajo la primera fila -->
      <div class="max-w-[90rem] mx-auto px-4 sm:px-6 lg:px-8 pb-2">
        <div class="grid grid-cols-1 lg:grid-cols-[220px_minmax(65ch,1fr)_220px] gap-6 items-center">
          <nav aria-label="Breadcrumb" class="text-xs sm:text-sm text-slate-500 dark:text-slate-400 flex items-center gap-2 lg:col-start-2">
            <!-- Único botón de menú hamburguesa en móvil -->
            <button id="sidebar-open" aria-label="Abrir menú" aria-controls="sidebar" aria-expanded="false" class="lg:hidden rounded-lg text-slate-600 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-900 h-11 w-11 flex items-center justify-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18"/><path d="M3 12h18"/><path d="M3 18h18"/></svg>
            </button>
            <ol class="flex flex-wrap items-center gap-1">
              {crumbs.map((c, i) => (
                i < crumbs.length - 1 ? (
                  <li class="flex items-center gap-1">
                    <span>{c.label}</span>
                    <span class="mx-1">›</span>
                  </li>
                ) : (
                  <li class="text-slate-700 dark:text-slate-200 font-medium">{c.label}</li>
                )
              ))}
            </ol>
          </nav>
          
        </div>
      </div>
  </header>

  <!-- Backdrop para búsqueda en móvil (debajo del header para no tapar el dropdown) -->
  <div id="doc-search-backdrop" class="fixed inset-0 bg-slate-900/25 dark:bg-black/45 backdrop-blur-sm hidden md:hidden z-[60]"></div>
  <!-- Overlay de búsqueda global en móvil (blur de fondo) -->
  <div id="mobile-search-overlay" class="fixed inset-0 z-[500] hidden md:hidden bg-slate-900/40 dark:bg-black/55 backdrop-blur-md supports-[backdrop-filter]:backdrop-saturate-150 opacity-0 transition-opacity duration-200 ease-out" aria-hidden="true">
    <div class="absolute inset-0 flex flex-col items-center mt-6 px-4 pb-6 overflow-y-auto" data-overlay-inner>
      <div data-panel-root class="w-full max-w-md flex flex-col items-stretch">
      <div class="relative w-full">
        <svg class="pointer-events-none absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-slate-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.3-4.3"/></svg>
  <input id="mobile-search-input" placeholder="Buscar en la documentación…" autocomplete="off" class="w-full pl-12 pr-12 py-3 rounded-xl bg-white/95 dark:bg-slate-950/95 border border-slate-200/70 dark:border-slate-700/70 shadow-2xl text-sm placeholder:text-slate-400 focus:outline-none focus:ring-2 focus:ring-primary-500/40 backdrop-blur" aria-autocomplete="list" aria-controls="mobile-search-list" />
        <button id="mobile-search-close" aria-label="Cerrar búsqueda" class="absolute right-2 top-1/2 -translate-y-1/2 h-9 w-9 flex items-center justify-center rounded-lg text-slate-500 dark:text-slate-400 hover:bg-slate-100 dark:hover:bg-slate-900 focus:outline-none focus:ring-2 focus:ring-primary-500/40">
          <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
        </button>
      </div>
      <div id="mobile-search-results" class="mt-3 bg-white/95 dark:bg-slate-950/95 border border-slate-200/70 dark:border-slate-700/60 rounded-xl shadow-xl overflow-hidden w-full backdrop-blur transform transition-all duration-200 ease-out origin-top scale-95 opacity-0 hidden" data-results-panel>
        <ul id="mobile-search-list" class="overflow-auto max-h-[60vh] p-2 space-y-1 text-sm"></ul>
      </div>
      
      </div>
    </div>
  </div>
  <!-- Scrim del sidebar -->
  <div id="sidebar-scrim" class="fixed inset-0 bg-black/40 hidden z-[240] lg:hidden"></div>

  <!-- Grid de 3 columnas: sidebar / contenido / ToC -->
  <div class="max-w-[90rem] mx-auto px-4 sm:px-6 lg:px-8 py-8 grid grid-cols-1 lg:grid-cols-[220px_minmax(65ch,1fr)_220px] gap-6 lg:gap-8 xl:gap-10 relative">
      <!-- Sidebar -->
  <aside id="sidebar" class="fixed inset-y-0 left-0 z-[260] w-72 bg-white dark:bg-slate-950 text-slate-900 dark:text-slate-100 border-r border-slate-200 dark:border-slate-800 p-4 overflow-y-auto transform -translate-x-full transition-transform duration-200 shadow-2xl lg:static lg:translate-x-0 lg:w-auto lg:p-0 lg:border-r lg:pr-6 lg:shadow-none lg:z-auto lg:sticky lg:top-[var(--docs-header-h,5rem)] lg:self-start lg:max-h-[calc(100vh-var(--docs-header-h,5rem))] lg:overflow-y-auto" aria-label="Menú lateral">
        <button id="sidebar-close" aria-label="Cerrar menú" class="lg:hidden absolute top-2 right-2 h-11 w-11 flex items-center justify-center rounded-lg text-slate-600 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-900">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
        </button>
  <nav class="space-y-6 text-sm" aria-label="Navegación de documentación">
          <div class="group">
            <button class="w-full flex items-center justify-between text-left text-xs font-semibold text-slate-600 dark:text-slate-400 uppercase tracking-wider mb-2">
              <span>Empezar</span>
            </button>
            <ul class="space-y-1 pl-1">
              <li><a class={`block px-2 py-1 rounded text-slate-800 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-900 ${currentPath === '/docs/Empezar/Instalacion' ? 'bg-slate-100 dark:bg-slate-900 text-primary-600' : ''}`} href="/docs/Empezar/Instalacion">Instalación</a></li>
            </ul>
          </div>
          <div class="group">
            <button class="w-full flex items-center justify-between text-left text-xs font-semibold text-slate-600 dark:text-slate-400 uppercase tracking-wider mb-2">
              <span>Cuenta</span>
            </button>
            <ul class="space-y-1 pl-1">
              <li><a class={`block px-2 py-1 rounded text-slate-800 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-900 ${currentPath === '/docs/cuenta/pricing' ? 'bg-slate-100 dark:bg-slate-900 text-primary-600' : ''}`} href="/docs/cuenta/pricing">Precios</a></li>
            </ul>
          </div>
        </nav>
      </aside>

      <!-- Contenido principal -->
      <main class="min-w-0">
        <article id="doc-article" data-pagefind-body class="prose prose-slate dark:prose-invert mx-auto max-w-[78ch]">
          <slot />
        </article>
      </main>

      <!-- Tabla de contenidos (ToC) -->
      <aside class="hidden lg:block">
        <div class="sticky top-[var(--docs-header-h,5rem)] border-l border-slate-200 dark:border-slate-800 pl-6">
          <div class="text-xs font-semibold text-slate-500 uppercase tracking-wider mb-3">En esta página</div>
          <nav id="toc" class="text-[0.95rem] leading-6 space-y-1.5"></nav>
        </div>
      </aside>
    </div>

    <footer class="py-8 text-center text-sm text-slate-500">
      <p>© 2025 Pynark — Documentación</p>
    </footer>

    <script>
      // @ts-nocheck
      // Búsqueda ligera del lado del cliente
      ;(function initLightSearch() {
  const container = document.getElementById('doc-search');
        const input = document.getElementById('doc-search-input');
        const dropdown = document.getElementById('doc-search-dropdown');
        const list = document.getElementById('doc-search-list');
  const backdrop = document.getElementById('doc-search-backdrop');
  const sidebarScrim = document.getElementById('sidebar-scrim');
  const DEBUG_SEARCH = true;
        if (!container || !input || !dropdown || !list) return;

    const showBackdrop = (on) => {
      if (!backdrop) return;
      if (on) backdrop.classList.remove('hidden');
      else backdrop.classList.add('hidden');
    };

        const setMobileOverlay = (on) => {
          // En móvil, convertir el contenedor en un overlay por encima del header y el menú
          const isMobile = window.matchMedia('(max-width: 767px)').matches;
          if (!isMobile) return; // sólo en móvil
          const hamburger = document.getElementById('sidebar-open');
          const themeBtn = document.getElementById('theme-toggle-docs');
          const headerRow = document.getElementById('docs-header-row');
          if (on) {
            container.classList.remove('relative');
            container.classList.add('fixed','inset-x-0','top-2','px-3','w-full','z-[180]');
            // Colocar el toggle a la derecha del input dentro del overlay
            if (themeBtn && !container.contains(themeBtn)) {
              themeBtn.dataset._returnParent = 'header'; // marca para saber que volvemos al header
              container.appendChild(themeBtn);
            }
            themeBtn?.classList.add('absolute','right-2','top-1/2','-translate-y-1/2');
            themeBtn?.classList.remove('opacity-0','pointer-events-none');
            input.classList.add('pr-12');
            hamburger?.classList.add('opacity-0','pointer-events-none');
            document.body.classList.add('overflow-hidden');
            // cerrar sidebar si estuviera abierto
            const sb = document.getElementById('sidebar');
            sb?.classList.add('-translate-x-full');
            sidebarScrim?.classList.add('hidden');
          } else {
            container.classList.remove('fixed','inset-x-0','top-2','px-3','w-full');
            container.classList.remove('z-[180]');
            container.classList.add('relative');
            // Regresar el toggle a la fila del header
            if (themeBtn && headerRow && themeBtn.dataset._returnParent === 'header') {
              headerRow.appendChild(themeBtn);
              delete themeBtn.dataset._returnParent;
            }
            themeBtn?.classList.remove('absolute','right-2','top-1/2','-translate-y-1/2');
            input.classList.remove('pr-12');
            hamburger?.classList.remove('opacity-0','pointer-events-none');
            document.body.classList.remove('overflow-hidden');
          }
        };

        let index = null; // { entries: [{url,title,headings:string[],text:string}] }
        let active = -1; // índice activo en la lista para navegación con teclado
        let lastQuery = '';

        const fetchIndex = async () => {
          if (index) return index;
          // 1. Intentar índice embebido
          try {
            const embedded = document.getElementById('__doc-index');
            if (embedded?.textContent) {
              const arr = JSON.parse(embedded.textContent);
              if (Array.isArray(arr) && arr.length) {
                index = { entries: arr };
                if (DEBUG_SEARCH) console.info('[Search] índice embebido cargado', arr.length);
                return index;
              }
            }
          } catch (e) { console.warn('Índice embebido inválido', e); }
          // 2. Intentar JSON externo
            try {
              const res = await fetch('/docs/search-index.json', { cache: 'no-store' });
              if (res.ok) {
                const data = await res.json();
                if (data && Array.isArray(data.entries) && data.entries.length) {
                  index = data; return index;
                }
              }
            } catch (e) { /* ignorar */ }
          // 3. Fallback Pagefind
          try {
            if (typeof window !== 'undefined' && !window.pagefind && !document.getElementById('pagefind-script')) {
              const s = document.createElement('script');
              s.id = 'pagefind-script';
              s.src = '/pagefind/' + 'pagefind.js';
              s.async = true; document.head.appendChild(s);
              await new Promise((res, rej) => { s.onload = () => res(); s.onerror = () => rej(new Error('No cargó pagefind.js')); });
            }
            if (window.pagefind) { index = { entries: null, usePagefind: true }; return index; }
          } catch (e) { console.warn('No se pudo inicializar Pagefind', e); }
          index = { entries: [] }; return index;
        };

        const normalize = (s='') => s
          .toLowerCase()
          .normalize('NFD')
          .replace(/\p{Diacritic}/gu,'');
        const expandQuery = (q) => {
          const nq = normalize(q);
          const vars = new Set([nq]);
          if (nq.endsWith('s')) vars.add(nq.replace(/s$/, ''));
          else vars.add(nq + 's');
          if (/(precio|precios)/.test(nq)) { vars.add('pricing'); vars.add('price'); vars.add('prices'); }
          if (/pricing|price|prices/.test(nq)) { vars.add('precio'); vars.add('precios'); }
          return Array.from(vars);
        };

        const score = (q, entry) => {
          const query = normalize(q);
          const title = normalize(entry.title || '');
          const heads = normalize((entry.headings || []).join(' \n '));
          const text = normalize(entry.text || '');
          let s = 0;
          for (const qv of expandQuery(query)) {
            if (title.includes(qv)) s += 10;
            if (heads.includes(qv)) s += 5;
            if (text.includes(qv)) s += 2;
            if (title.startsWith(qv)) s += 5;
          }
          return s;
        };

        const highlight = (snippet, q) => {
          if (!q) return snippet;
          const safe = snippet.replace(/[<>]/g,'');
          try {
            const n = normalize(q);
            // dividir palabras básicas del query
            const parts = n.split(/\s+/).filter(Boolean).slice(0,4);
            if (!parts.length) return safe;
            let pattern = parts.map(p => p.replace(/[-/\\^$*+?.()|[\]{}]/g,'\\$&')).join('|');
            const re = new RegExp(`(${pattern})`,`gi`);
            return safe.replace(re, m => `<mark class="bg-yellow-200 dark:bg-yellow-500/40 text-inherit rounded px-0.5">${m}</mark>`);
          } catch { return safe; }
        };
        const render = (items, q) => {
          list.innerHTML = '';
          active = -1;
          if (!items.length) {
            if ((q||'').trim().length >= 2) {
              const li = document.createElement('li');
              li.className = 'px-3 py-2 text-slate-500 text-sm';
              li.textContent = 'Sin resultados';
              list.appendChild(li);
              dropdown.classList.remove('hidden');
              showBackdrop(true);
              setMobileOverlay(true);
              input.setAttribute('aria-expanded','true');
            } else {
              dropdown.classList.add('hidden');
              showBackdrop(false);
              setMobileOverlay(false);
              input.setAttribute('aria-expanded', 'false');
            }
            return;
          }
          items.slice(0, 8).forEach((it, i) => {
            const li = document.createElement('li');
            li.className = 'px-3 py-2 hover:bg-slate-100 dark:hover:bg-slate-900 cursor-pointer';
            li.setAttribute('role', 'option');
            const shownTitle = it.title || it.url;
            const snippet = it.snippet || '';
            li.innerHTML = `
              <div class=\"font-medium\">${highlight(shownTitle, q)}</div>
              ${snippet ? `<div class=\"text-xs text-slate-500 line-clamp-2\">${highlight(snippet, q)}</div>` : ''}
            `;
            li.addEventListener('mousedown', (e) => { // mousedown para no perder foco antes del click
              e.preventDefault();
              window.location.href = it.url;
            });
            list.appendChild(li);
          });
          dropdown.classList.remove('hidden');
          showBackdrop(true);
          setMobileOverlay(true);
          input.setAttribute('aria-expanded', 'true');
        };

        const search = async (q) => {
          const data = await fetchIndex();
          const entries = data.entries || [];
          const query = q.trim();
          if (!query) { dropdown.classList.add('hidden'); showBackdrop(false); setMobileOverlay(false); input.setAttribute('aria-expanded','false'); return; }
          if (DEBUG_SEARCH) console.info('[Search] entradas disponibles', entries.length);
          let ranked = entries
            .map((e) => ({
              ...e,
              _score: score(query, e),
              match: '',
            }))
            .filter((e) => e._score > 0)
            .sort((a,b) => b._score - a._score);
          if (DEBUG_SEARCH) console.info('[Search] ranked length', ranked.length);
          if (!ranked.length) {
            // fallback substring
            const nq = normalize(query);
            const variants = expandQuery(nq);
            const fb = entries.filter(e => {
              const t = normalize(e.title||'');
              const x = normalize(e.text||'');
              return variants.some(v => t.includes(v) || x.includes(v));
            }).slice(0,20);
            if (DEBUG_SEARCH) console.info('[Search] fallback substring length', fb.length);
            if (fb.length) {
              fb.forEach((e) => {
                const plain = e.text || '';
                const low = normalize(plain);
                let idx = -1; let matchLen = nq.length;
                for (const v of variants) { const i = low.indexOf(v); if (i !== -1) { idx = i; matchLen = Math.max(matchLen, v.length); break; } }
                let snippet = plain.slice(0, 140) + (plain.length>140?'…':'');
                if (idx !== -1) {
                  const start = Math.max(0, idx - 40);
                  snippet = plain.slice(start, idx + matchLen + 80).trim();
                  if (start > 0) snippet = '…' + snippet;
                  if (idx + matchLen + 80 < plain.length) snippet += '…';
                }
                e.snippet = snippet;
              });
              ranked = fb;
            }
          }

          // Si aún no hay resultados y Pagefind está listo, intentar también como fallback
          if ((!ranked || !ranked.length) && window.pagefind) {
            try {
              const pfRes = await window.pagefind.search(query);
              const items = await Promise.all((pfRes?.results || []).slice(0,30).map(async r => {
                const d = await r.data();
                return {
                  url: d.url,
                  title: d.meta?.title || d.url,
                  snippet: d.content_excerpt || (d.content || '').slice(0,160),
                  _score: r.score || 0
                };
              }));
              items.sort((a,b)=> (b._score||0) - (a._score||0));
              ranked = items;
            } catch (e) {
              console.warn('Error buscando con Pagefind', e);
            }
          }

          // genera snippet simple
          ranked.forEach((e) => {
            const plain = e.text || '';
            const nq = normalize(query);
            // buscar ventana alrededor de la primera coincidencia normalizada
            const low = normalize(plain);
            let idx = low.indexOf(nq); let matchLen = nq.length;
            if (idx === -1) {
              for (const v of expandQuery(nq)) { const i = low.indexOf(v); if (i !== -1) { idx = i; matchLen = Math.max(matchLen, v.length); break; } }
            }
            let snippet = '';
            if (idx !== -1) {
              const start = Math.max(0, idx - 40);
              snippet = plain.slice(start, idx + matchLen + 80).trim();
              if (start > 0) snippet = '…' + snippet;
              if (idx + matchLen + 80 < plain.length) snippet += '…';
            } else {
              snippet = plain.slice(0, 140) + (plain.length>140 ? '…':'');
            }
            e.snippet = snippet;
          });
          render(ranked, query);
        };

        let debounce;
        input.addEventListener('input', (e) => {
          const q = e.target.value;
          lastQuery = q;
          // Mostrar overlay mientras escribe, aunque aún no haya resultados
          setMobileOverlay(true);
          showBackdrop(true);
          clearTimeout(debounce);
          debounce = setTimeout(() => search(q), 120);
        });

        input.addEventListener('focus', () => {
          // Activar overlay y backdrop al enfocar el input en móvil
          setMobileOverlay(true);
          showBackdrop(true);
          if (lastQuery) search(lastQuery); else if (input.value.trim()) { lastQuery = input.value; search(lastQuery); }
        });

        input.addEventListener('blur', () => {
          // Si se pierde el foco y no se hizo click en resultados, cerrar overlay/backdrop
          setTimeout(() => {
            if (dropdown.classList.contains('hidden')) {
              setMobileOverlay(false);
              showBackdrop(false);
            }
          }, 50);
        });

        // Soporta navegación y búsqueda inmediata al presionar Enter aunque el debounce no haya terminado
        input.addEventListener('keydown', async (e) => {
          let items = Array.from(list.children);
          if (e.key === 'ArrowDown') {
            if (!items.length) return; // sin resultados aún
            e.preventDefault(); active = (active + 1) % items.length; updateActive(items); return;
          }
          if (e.key === 'ArrowUp') {
            if (!items.length) return;
            e.preventDefault(); active = (active - 1 + items.length) % items.length; updateActive(items); return;
          }
          if (e.key === 'Enter') {
            e.preventDefault();
            // Si aún no hay ítems visibles (debounce en curso), forzar búsqueda inmediata
            if (!items.length) {
              await search(input.value);
              items = Array.from(list.children);
            }
            if (items.length) {
              if (active === -1) active = 0; // por defecto el primero
              const target = items[active];
              if (target) target.dispatchEvent(new MouseEvent('mousedown'));
            }
            return;
          }
          if (e.key === 'Escape') {
            dropdown.classList.add('hidden');
            showBackdrop(false);
            setMobileOverlay(false);
            input.setAttribute('aria-expanded','false');
            return;
          }
        });

        // Accesibilidad básica
        input.setAttribute('role','combobox');
        input.setAttribute('aria-expanded','false');
        input.setAttribute('aria-haspopup','listbox');
        list.setAttribute('role','listbox');

        function updateActive(items) {
          items.forEach((el, i) => el.classList.toggle('bg-slate-100', i === active));
          const activeEl = items[active];
          if (activeEl) activeEl.scrollIntoView({ block: 'nearest' });
        }

        document.addEventListener('click', (e) => {
          if (!container.contains(e.target)) { dropdown.classList.add('hidden'); showBackdrop(false); setMobileOverlay(false); }
        });

        // Cerrar al tocar el backdrop
        backdrop?.addEventListener('click', () => {
          dropdown.classList.add('hidden');
          showBackdrop(false);
          setMobileOverlay(false);
          input.setAttribute('aria-expanded','false');
        });
      })();

      // Sidebar mobile toggle + scrim + a11y focus trap
      const sidebar = document.getElementById('sidebar');
      const openBtn = document.getElementById('sidebar-open');
      const closeBtn = document.getElementById('sidebar-close');
      const scrim = document.getElementById('sidebar-scrim');
      let lastFocus = null;

      // Hard reset for the mobile search overlay if it stayed active
      function resetSearchOverlayIfActive() {
        const container = document.getElementById('doc-search');
        const input = document.getElementById('doc-search-input');
        const dropdown = document.getElementById('doc-search-dropdown');
        const backdrop = document.getElementById('doc-search-backdrop');
        const hamburger = document.getElementById('sidebar-open');
        const themeBtn = document.getElementById('theme-toggle-docs');
        const headerRow = document.getElementById('docs-header-row');
        if (!container) return;
        if (container.classList.contains('fixed')) {
          container.classList.remove('fixed','inset-x-0','top-2','px-3','w-full');
          container.classList.add('relative');
          if (themeBtn && headerRow && themeBtn.dataset._returnParent === 'header') {
            headerRow.appendChild(themeBtn);
            delete themeBtn.dataset._returnParent;
          }
          themeBtn?.classList.remove('absolute','right-2','top-1/2','-translate-y-1/2');
          input?.classList.remove('pr-12');
          hamburger?.classList.remove('opacity-0','pointer-events-none');
        }
        dropdown?.classList.add('hidden');
        backdrop?.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      }

      function getFocusable(container) {
        return Array.from(container.querySelectorAll('a, button, input, select, textarea, [tabindex]:not([tabindex="-1"])')).filter(el => !el.hasAttribute('disabled') && !el.getAttribute('aria-hidden'));
      }
      function openSidebar() {
        if (!sidebar) return;
        // cerrar búsqueda si está activa
        resetSearchOverlayIfActive();
        // mover estados
        lastFocus = document.activeElement;
        sidebar.classList.remove('-translate-x-full');
        openBtn?.setAttribute('aria-expanded','true');
        scrim?.classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
        // foco al primer foco navegable
        const focusables = getFocusable(sidebar);
        (focusables[0] || closeBtn || sidebar).focus();
      }
      function closeSidebar() {
        if (!sidebar) return;
        sidebar.classList.add('-translate-x-full');
        openBtn?.setAttribute('aria-expanded','false');
        scrim?.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
        if (lastFocus && typeof lastFocus.focus === 'function') lastFocus.focus();
      }

      openBtn?.addEventListener('click', () => openSidebar());
      closeBtn?.addEventListener('click', () => closeSidebar());
      scrim?.addEventListener('click', () => closeSidebar());
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && scrim && !scrim.classList.contains('hidden')) closeSidebar();
        if (e.key === 'Tab' && scrim && !scrim.classList.contains('hidden') && sidebar) {
          const focusables = getFocusable(sidebar);
          if (!focusables.length) return;
          const first = focusables[0];
          const last = focusables[focusables.length - 1];
          if (e.shiftKey && document.activeElement === first) { e.preventDefault(); last.focus(); }
          else if (!e.shiftKey && document.activeElement === last) { e.preventDefault(); first.focus(); }
        }
      });

  // Theme toggle (independent from main layout)
      const themeBtn = document.getElementById('theme-toggle-docs');
      // Mobile fullscreen search overlay (blur background, show only search UI)
      (function(){
        const btn = document.getElementById('search-toggle');
        const overlay = document.getElementById('mobile-search-overlay');
        const input = document.getElementById('mobile-search-input');
        const list = document.getElementById('mobile-search-list');
        const closeBtn = document.getElementById('mobile-search-close');
  const inner = overlay?.querySelector('[data-overlay-inner]');
  const panelRoot = overlay?.querySelector('[data-panel-root]');
        if(!btn || !overlay || !input || !list) return;
        let open = false;
        let indexCache = null;
        let lastQ = '';
        const DEBUG_M_SEARCH = false;

        const fetchIndex = async () => {
          if (indexCache) return indexCache;
          try {
            const embedded = document.getElementById('__doc-index');
            if (embedded?.textContent) {
              const arr = JSON.parse(embedded.textContent);
              if (Array.isArray(arr)) { indexCache = { entries: arr }; return indexCache; }
            }
          } catch {}
          indexCache = { entries: [] }; return indexCache;
        };
        const normalize = (s='') => s.toLowerCase().normalize('NFD').replace(/\p{Diacritic}/gu,'');
        const expandQuery = (q) => {
          const nq = normalize(q); const vars = new Set([nq]);
          if (nq.endsWith('s')) vars.add(nq.replace(/s$/,'')); else vars.add(nq+'s');
          if (/(precio|precios)/.test(nq)) { vars.add('pricing'); vars.add('price'); vars.add('prices'); }
          if (/pricing|price|prices/.test(nq)) { vars.add('precio'); vars.add('precios'); }
          return Array.from(vars);
        };
        const score = (q, entry) => {
          const query = normalize(q);
          const title = normalize(entry.title||'');
          const heads = normalize((entry.headings||[]).join(' '));
            const text = normalize(entry.text||'');
          let s=0; for(const qv of expandQuery(query)){ if(title.includes(qv)) s+=10; if(heads.includes(qv)) s+=5; if(text.includes(qv)) s+=2; if(title.startsWith(qv)) s+=5; }
          return s;
        };
        const highlight = (snippet, q) => {
          if(!q) return snippet; const safe = snippet.replace(/[<>]/g,'');
          try { const n = normalize(q); const parts = n.split(/\s+/).filter(Boolean).slice(0,4); if(!parts.length) return safe; const pattern = parts.map(p=>p.replace(/[-/\\^$*+?.()|[\]{}]/g,'\\$&')).join('|'); const re = new RegExp(`(${pattern})`,'gi'); return safe.replace(re, m=>`<mark class="bg-yellow-200 dark:bg-yellow-500/40 rounded px-0.5">${m}</mark>`);} catch { return safe; }
        };
        const panelWrapper = document.querySelector('#mobile-search-results');
        const render = (items, q) => {
          list.innerHTML='';
          const trimmed = (q||'').trim();
          if(!trimmed){
            panelWrapper?.classList.add('hidden');
            return;
          }
          if(!items.length){
            const li=document.createElement('li'); li.className='px-3 py-2 text-slate-500'; li.textContent='Sin resultados'; list.appendChild(li);
            panelWrapper?.classList.remove('hidden');
            return;
          }
          items.slice(0,12).forEach(it=>{
            const li=document.createElement('li');
            li.className='px-3 py-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-900 cursor-pointer';
            li.innerHTML=`<div class=\"font-medium\">${highlight(it.title||it.url,q)}</div>${it.snippet?`<div class=\"text-xs text-slate-500 line-clamp-2\">${highlight(it.snippet,q)}</div>`:''}`;
            li.addEventListener('mousedown',e=>{e.preventDefault(); window.location.href=it.url;});
            list.appendChild(li);
          });
          panelWrapper?.classList.remove('hidden');
        };
        const search = async (q) => {
          const { entries } = await fetchIndex();
          const query = q.trim();
          if(!query){ list.innerHTML=''; return; }
          let ranked = entries.map(e=>({...e,_score:score(query,e)})).filter(e=>e._score>0).sort((a,b)=>b._score-a._score);
          if(!ranked.length){
            const nq=normalize(query); const variants=expandQuery(nq);
            const fb = entries.filter(e=>{const t=normalize(e.title||''); const x=normalize(e.text||''); return variants.some(v=>t.includes(v)||x.includes(v));}).slice(0,20);
            if(fb.length) ranked=fb;
          }
          ranked.forEach(e=>{
            const plain=e.text||''; const nq=normalize(query); const low=normalize(plain); let idx=low.indexOf(nq); let matchLen=nq.length;
            if(idx===-1){ for(const v of expandQuery(nq)){ const i=low.indexOf(v); if(i!==-1){idx=i; matchLen=Math.max(matchLen,v.length); break;} } }
            let snippet=''; if(idx!==-1){ const start=Math.max(0,idx-40); snippet=plain.slice(start, idx+matchLen+80).trim(); if(start>0) snippet='…'+snippet; if(idx+matchLen+80<plain.length) snippet+='…'; } else { snippet=plain.slice(0,140)+(plain.length>140?'…':''); }
            e.snippet=snippet;
          });
          render(ranked, query);
        };
        function lockScroll(){
          const sbGap = window.innerWidth - document.documentElement.clientWidth;
          if (sbGap > 0) document.documentElement.style.paddingRight = sbGap + 'px';
          document.documentElement.classList.add('overflow-hidden');
          document.body.classList.add('overflow-hidden');
          document.documentElement.style.overscrollBehavior = 'none';
        }
        function unlockScroll(){
          document.documentElement.style.paddingRight='';
          document.documentElement.classList.remove('overflow-hidden');
            document.body.classList.remove('overflow-hidden');
          document.documentElement.style.overscrollBehavior='';
        }
        const panel = overlay.querySelector('[data-results-panel]');
        function openOverlay(){
          if(open) return; open=true; overlay.classList.remove('hidden'); overlay.removeAttribute('aria-hidden'); lockScroll(); btn.setAttribute('aria-expanded','true');
          requestAnimationFrame(()=>{
            overlay.classList.remove('opacity-0');
            panel?.classList.remove('opacity-0','scale-95');
            input.focus();
          });
        }
        function closeOverlay(){
          if(!open) return; open=false; overlay.setAttribute('aria-hidden','true'); overlay.classList.add('opacity-0'); panel?.classList.add('opacity-0','scale-95'); btn.setAttribute('aria-expanded','false');
          setTimeout(()=>{ if(!open){ overlay.classList.add('hidden'); unlockScroll(); list.innerHTML=''; input.value=''; panelWrapper?.classList.add('hidden'); } }, 180);
        }
        btn.addEventListener('click', ()=> open ? closeOverlay() : openOverlay());
        closeBtn?.addEventListener('click', ()=> closeOverlay());
        // Outside click (mousedown for quicker response & to avoid focus shift before closing)
        overlay.addEventListener('mousedown', (e)=>{
          if(!open) return;
            // If no panelRoot (fallback), retain previous behavior
          if(!panelRoot){
            if(e.target === overlay) { closeOverlay(); }
            else if(inner && !inner.contains(e.target as Node)) { closeOverlay(); }
            return;
          }
          if(!panelRoot.contains(e.target as Node)) {
            // Ensure event originated within overlay bounds
            if(overlay.contains(e.target as Node)) closeOverlay();
          }
        }, { capture: true });
        document.addEventListener('keydown', e=>{ if(e.key==='Escape') closeOverlay(); });
  let deb; input.addEventListener('input', e=>{ const q=e.target.value; lastQ=q; clearTimeout(deb); deb=setTimeout(()=>search(q),100); if(!q.trim()){ panelWrapper?.classList.add('hidden'); } });
        if(DEBUG_M_SEARCH) console.log('[mobile-search] overlay inicializado');
      })();
      const sun = document.getElementById('icon-sun');
      const moon = document.getElementById('icon-moon');
      function reflectThemeIcons() {
        const isDark = document.documentElement.classList.contains('dark');
        const btn = document.getElementById('theme-toggle-docs');
        if (isDark) {
          sun?.classList.remove('hidden');
          moon?.classList.add('hidden');
          btn?.setAttribute('aria-label','Tema: Oscuro');
          btn?.setAttribute('title','Tema: Oscuro');
        } else {
          moon?.classList.remove('hidden');
          sun?.classList.add('hidden');
          btn?.setAttribute('aria-label','Tema: Claro');
          btn?.setAttribute('title','Tema: Claro');
        }
      }
      reflectThemeIcons();
      themeBtn?.addEventListener('click', () => {
        const isDark = document.documentElement.classList.toggle('dark');
        sessionStorage.setItem('color-theme', isDark ? 'dark' : 'light');
        document.documentElement.style.colorScheme = isDark ? 'dark' : 'light';
        document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
        const meta = document.querySelector('meta[name="theme-color"]');
        if (meta) meta.setAttribute('content', isDark ? '#0f172a' : '#3b82f6');
        reflectThemeIcons();
      });

      // Compute dynamic header height to align H1 and ToC start
      ;(function setHeaderHeightVar(){
        const header = document.querySelector('header.sticky');
        const root = document.documentElement;
        function apply(){
          const h = header?.getBoundingClientRect().height || 80;
          root.style.setProperty('--docs-header-h', Math.round(h + 16) + 'px');
        }
        apply();
        window.addEventListener('resize', () => { apply(); });
      })();

      // Generate anchors and ToC from article headings (h2, h3)
      const article = document.getElementById('doc-article');
      const toc = document.getElementById('toc');
      /** @type {(text: string) => string} */
      const slugify = (text) => {
        return text
          .toLowerCase()
          .normalize('NFD').replace(/\p{Diacritic}/gu, '')
          .replace(/[^a-z0-9\s-]/g, '')
          .trim()
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-');
      }
      function buildToc() {
        if (!article || !toc) return;
        const headings = Array.from(article.querySelectorAll('h2, h3'));
        toc.innerHTML = '';
  const list = document.createElement('ul');
  list.className = 'space-y-1.5';
        headings.forEach((h) => {
          if (!h.id) {
            h.id = slugify(h.textContent || '');
          }
          // add anchor icon
          if (!h.querySelector('a.anchor')) {
            const a = document.createElement('a');
            a.href = `#${h.id}`;
            a.className = 'anchor opacity-0 group-hover:opacity-100 ml-2 text-slate-400 hover:text-primary-600';
            a.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="inline w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10 13a5 5 0 0 1 7 0l1 1a5 5 0 0 1-7 7l-1-1"/><path d="M14 11a5 5 0 0 1-7 0l-1-1a5 5 0 0 1 7-7l1 1"/></svg>';
            h.classList.add('group');
            h.appendChild(a);
          }
          const li = document.createElement('li');
          const link = document.createElement('a');
          link.href = `#${h.id}`;
          link.textContent = h.textContent || '';
          link.className = `block px-2 py-1 rounded hover:bg-slate-100 dark:hover:bg-slate-900 ${h.tagName === 'H3' ? 'ml-3 text-[0.9rem]' : 'font-medium'}`;
          li.appendChild(link);
          list.appendChild(li);
        });
        toc.appendChild(list);
      }
      buildToc();

      // Scroll spy for ToC
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const id = entry.target.getAttribute('id');
          if (!id) return;
          const link = toc?.querySelector(`a[href="#${CSS.escape(id)}"]`);
          if (!link) return;
          if (entry.isIntersecting) {
            toc?.querySelectorAll('a').forEach((a) => a.classList.remove('text-primary-600'));
            link.classList.add('text-primary-600');
          }
        });
      }, { rootMargin: '0px 0px -70% 0px', threshold: [0, 1] });
      document.querySelectorAll('#doc-article h2, #doc-article h3').forEach((h) => observer.observe(h));
    </script>
  </body>
</html>

<style>
  :root {
    --docs-header-h: 5rem; /* fallback */
  }
  .prose :where(code):not(:where(pre code)) {
    background: rgba(148,163,184,0.15);
    padding: 0.2rem 0.35rem;
    border-radius: 0.375rem;
  }
  .prose :where(h1,h2,h3,h4) { scroll-margin-top: var(--docs-header-h); }
  /* Vertical rhythm improvements */
  .prose :where(h1) { margin-top: 0; margin-bottom: 1.1rem; }
  .prose :where(p) { margin-top: 0.9rem; margin-bottom: 0.9rem; }
  .prose :where(h2) { margin-top: 2.4rem; margin-bottom: 0.9rem; }
  .prose :where(h3) { margin-top: 1.6rem; margin-bottom: 0.6rem; }
  .prose :where(ul,ol) { margin-top: 0.75rem; margin-bottom: 1rem; }
  .prose :where(li > ul, li > ol) { margin-top: 0.25rem; margin-bottom: 0.25rem; }
  /* TOC links */
  #toc a { color: inherit; }
  #toc a:hover { color: var(--tw-prose-links); }
  #toc a.text-primary-600 { font-weight: 600; }
</style>
